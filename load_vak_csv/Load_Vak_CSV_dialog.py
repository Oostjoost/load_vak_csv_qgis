# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LoadVakCsvDialog
                                 A QGIS plugin
 Vak.csv inladen in QGIS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-03-09
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Joost Deen/SafetyCT
        email                : j.deen@safetyct.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import csv

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtCore import QVariant
from qgis.PyQt.QtWidgets import QFileDialog, QPushButton, QMessageBox
from qgis.core import *
from qgis.utils import iface

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'Load_Vak_CSV_dialog_base.ui'))


class LoadVakCsvDialog(QtWidgets.QDialog, FORM_CLASS):

    iface = None

    def __init__(self, parent=None):
        """Constructor."""
        super(LoadVakCsvDialog, self).__init__(parent)
        #self.iface = iface
        self.setupUi(self)
        self.outputFile.setVisible(False)
        self.outputMap.setVisible(False)
        self.label_2.setVisible(False)
        self.label_4.setVisible(False)
        self.label_3.setVisible(False)
        self.label_5.setVisible(False)
        self.inputFile.setEnabled(False)
        self.shape.setVisible(False)
        self.geopackage.setVisible(False)
        self.memory.setVisible(False)
        self.csv.setVisible(False)
        self.addtomap.setVisible(False)
        self.converteer.setEnabled(False)
        self.cancel.clicked.connect(self.closeDialog)
        self.loadFile.clicked.connect(self.loadImportFile)
        self.outputMap.clicked.connect(self.selectOutputMap)

    def loadImportFile(self):
        self.importFile = QFileDialog.getOpenFileName(None, "Selecteer vak.csv:",None,"CSV (*.csv)")[0]
        if self.importFile:
            self.outputFile.setText(os.path.split(os.path.abspath(self.importFile))[0].replace('\\', '/'))
            self.inputFile.setEnabled(True)
            self.inputFile.setText(self.importFile)
            self.inputFile.setEnabled(False)
            self.label_3.setVisible(True)
            self.shape.setVisible(True)
            self.geopackage.setVisible(True)
            self.memory.setVisible(True)
            self.csv.setVisible(True)
            self.shape.toggled.connect(self.saveFile)
            self.geopackage.toggled.connect(self.saveFile)
            self.csv.toggled.connect(self.saveFile)
            self.memory.toggled.connect(self.dontSaveFile)
            self.converteer.clicked.connect(self.convertOracle)
        
    def saveFile(self):
        self.addtomap.setEnabled(True)
        self.addtomap.setVisible(True)
        self.outputFile.setVisible(True)
        self.outputMap.setVisible(True)
        self.label_2.setVisible(True)
        self.label_4.setVisible(True)
        self.label_5.setVisible(True)
        self.converteer.setEnabled(True)
            
    def dontSaveFile(self):
        self.outputFile.setVisible(False)
        self.outputMap.setVisible(False)
        self.label_2.setVisible(False)
        self.label_4.setVisible(False)
        self.label_5.setVisible(False)
        self.addtomap.setChecked(True)
        self.addtomap.setEnabled(False)
        self.converteer.setEnabled(True)
        
    def selectOutputMap(self):
        self.exportMap = QFileDialog.getExistingDirectory(None, "Selecteer een map om op te slaan", os.path.abspath(self.importFile))
        self.outputFile.setEnabled(True)
        self.outputFile.setText(self.exportMap)
        self.outputFile.setEnabled(False)
       
    def convertOracle(self):
        exportFile = []
        self.exportMap = self.outputFile.text()
        header = ['id', 'name', 'oracle_gtype', 'crs', 'wkt_geom']
        exportFile.append(header)
        
        with open(self.importFile) as csv_file:
            csv_reader = csv.reader(csv_file, delimiter=';')
            for row in csv_reader:
                
                tempArr = []
                coorArr = []          
                startPoint = []
                endPoint = []
                tempCoorX = 0
                tempCoorY = 0
                tempArr.append(row[0])
                tempArr.append(row[1])
                tempArr.append(row[2])
                tempArr.append(row[3])
                
                i = 0
                while '|' not in row[i]:
                    i += 1
                
                countPolygons = int((i - 3)/3)
                coorArr = []
                
                if countPolygons == 1:
                    coorArr.append('MultiPolygon((')
                else:
                    coorArr.append('MultiPolygon((')
                
                for j in range(countPolygons):
                    startPoint.append(int(row[4 + 3 * j]) + 2 + 3 * countPolygons)
                    if j < countPolygons - 1:
                        endPoint.append(int(row[4 + 3 * (j + 1)]) + 2 + 3 * countPolygons)
                    else:
                        endPoint.append(len(row))
                     
                for j in range(countPolygons):
                    coorArr.append('(')
                    for i in range(startPoint[j], endPoint[j], 2):
                        if j == 0 and i == startPoint[0]:
                            tempCoorX = str(row[i].split('|')[1]).replace(',','.')
                            tempCoorY = str(row[i + 1]).replace(',','.')
                            coorArr.append(tempCoorX + ' ' + tempCoorY)
                        elif j == countPolygons - 1 and i >= endPoint[j] - 2:
                            tempCoorX = str(row[i]).replace(',','.')
                            tempCoorY = str(row[i + 1].split('|')[0]).replace(',','.')
                            coorArr.append(tempCoorX + ' ' + tempCoorY)
                        else:
                            tempCoorX = str(row[i]).replace(',','.')
                            tempCoorY = str(row[i + 1]).replace(',','.')
                            coorArr.append(tempCoorX + ' ' + tempCoorY)
                        if i < endPoint[j] - 2:
                            coorArr.append(',')
                    if j == countPolygons - 1:
                        if countPolygons == 1:
                            coorArr.append(')))')
                        else:
                            coorArr.append(')))')                
                    else:
                        coorArr.append('),')
                
                tempArr.append(''.join(coorArr))
                exportFile.append(tempArr)
        
        if self.csv.isChecked() == True:
            with open(self.exportMap + '/vak_output.csv', mode='w', newline = '') as csv_file:
                writer = csv.writer(csv_file, delimiter = ',')
                writer.writerows(exportFile)
                self.fileWriter(['csv', ''], '')
        else:
            self.createVectorLayer(exportFile)
        
        message = 'De conversie is succesvol uitgevoerd!'
        QMessageBox.information(None, "INFO:", message)
        
        self.closeDialog()
        
    def createVectorLayer(self, exportFile):
        vl = QgsVectorLayer("MultiPolygon?crs=epsg:28992", "Vak", "memory")
        pr = vl.dataProvider()
        vl.startEditing()
        
        pr.addAttributes( [ QgsField(exportFile[0][0], QVariant.Int),
                            QgsField(exportFile[0][1], QVariant.String),
                            QgsField(exportFile[0][2], QVariant.Int),
                            QgsField(exportFile[0][3], QVariant.Int)])
        vl.updateFields()
        vl.updateExtents()

        for i in range(len(exportFile)):
            if i > 0:
                fet = QgsFeature()
                fet.setGeometry(QgsGeometry.fromWkt(str(exportFile[i][4])))
                fet.setAttributes([int(exportFile[i][0]), exportFile[i][1], int(exportFile[i][2]), int(exportFile[i][3])])
                vl.addFeatures([fet])
                vl.updateExtents()
        # Commit changes
        vl.commitChanges()
        # Show in project
        if self.addtomap.isChecked() == True:
            QgsProject.instance().addMapLayer(vl)
        if self.shape.isChecked() == True:
            self.fileWriter(['shp','ESRI Shapefile'], vl)
        elif self.geopackage.isChecked() == True:
            self.fileWriter(['gpkg', 'GPKG'], vl)

    def fileWriter(self, exportFileSettings, vl):
        exportPath = self.exportMap + '/vak_output.' + exportFileSettings[0]
        if not exportFileSettings[0] == 'csv':
            _writer = QgsVectorFileWriter.writeAsVectorFormat(vl, exportPath, 'utf-8', driverName = exportFileSettings[1])
            layer = QgsVectorLayer(exportPath, "Vak", "ogr")
            QgsProject.instance().removeMapLayers([vl.id()])
        else:
            uri = 'file:///' + exportPath + '?type=csv&detectTypes=no&wktField=wkt_geom&crs=EPSG:28992&spatialIndex=no&subsetIndex=no&watchFile=no'
            print(uri)
            layer = QgsVectorLayer(uri, 'Vak', 'delimitedtext')
        
        QgsProject.instance().addMapLayer(layer)
        
    def closeDialog(self):
        self.close()
        del self        
